name: Railway Backup
on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 2 * * *'  # 每天凌晨2点自动备份

jobs:
  backup:
    runs-on: ubuntu-latest
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install latest Railway CLI
        run: |
          echo "Installing latest Railway CLI..."
          npm install -g @railway/cli@latest
          railway --version
          echo "Railway CLI installation completed"
          
      - name: Verify Railway CLI installation
        run: |
          echo "Verifying Railway CLI installation..."
          which railway
          railway --version
          echo "CLI path: $(which railway)"
          echo "CLI version: $(railway --version)"
          
      - name: Setup Railway environment
        run: |
          echo "Setting up Railway environment..."
          echo "Token length: ${#RAILWAY_TOKEN}"
          echo "Project ID: $RAILWAY_PROJECT_ID"
          
          # Set environment variables for Railway CLI
          export RAILWAY_TOKEN="$RAILWAY_TOKEN"
          export RAILWAY_PROJECT_ID="$RAILWAY_PROJECT_ID"
          
          # Create Railway config directory
          mkdir -p ~/.railway
          
          # Create config file with proper escaping
          cat > ~/.railway/config.json << 'EOF'
          {
            "token": "'"$RAILWAY_TOKEN"'",
            "project": "'"$RAILWAY_PROJECT_ID"'"
          }
          EOF
          
          echo "Config file created successfully"
          echo "Config file contents (masked):"
          cat ~/.railway/config.json | sed 's/"[^"]*"/"***"/g'
          
      - name: Test Railway authentication methods
        run: |
          echo "Testing various Railway authentication methods..."
          
          # Method 1: Direct environment variable
          echo "Method 1: Direct environment variable"
          RAILWAY_TOKEN="$RAILWAY_TOKEN" railway whoami || echo "Method 1 failed"
          
          # Method 2: Config file
          echo "Method 2: Config file"
          railway whoami || echo "Method 2 failed"
          
          # Method 3: Direct project link
          echo "Method 3: Direct project link"
          railway link --project "$RAILWAY_PROJECT_ID" || echo "Method 3 failed"
          
          echo "Authentication testing completed"
          
      - name: Verify final authentication
        run: |
          echo "Verifying final authentication status..."
          
          # Check if we can access Railway
          if railway whoami > /dev/null 2>&1; then
            echo "✅ Railway authentication successful"
            railway whoami
          else
            echo "❌ Railway authentication failed"
            echo "Attempting to continue with project link..."
            railway link --project "$RAILWAY_PROJECT_ID" || echo "Project link also failed"
          fi
          
      - name: Check Railway project access
        run: |
          echo "Checking Railway project access..."
          
          # Try to get project status
          if railway status > /dev/null 2>&1; then
            echo "✅ Project access successful"
            railway status
          else
            echo "❌ Project access failed"
            echo "Available commands:"
            railway --help
          fi
          
      - name: List current directory and files
        run: |
          echo "Current working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo ""
          echo "Python files:"
          find . -name "*.py" -type f
          echo ""
          echo "Railway config:"
          ls -la ~/.railway/ || echo "No Railway config directory"
          
      - name: Check backup script existence
        run: |
          echo "Checking backup script..."
          if [ -f "railway_backup_correct.py" ]; then
            echo "✅ Backup script found: railway_backup_correct.py"
            echo "File size: $(ls -lh railway_backup_correct.py | awk '{print $5}')"
            echo "File permissions: $(ls -la railway_backup_correct.py | awk '{print $1}')"
          else
            echo "❌ Backup script NOT found!"
            echo "Available Python files:"
            find . -name "*.py" -type f -exec ls -la {} \;
          fi
          
      - name: Execute backup with fallback
        run: |
          echo "Executing backup process..."
          
          # Try Railway run first
          if command -v railway > /dev/null 2>&1 && railway whoami > /dev/null 2>&1; then
            echo "Using Railway CLI for backup..."
            railway run python railway_backup_correct.py || {
              echo "Railway CLI backup failed, trying local execution..."
              python railway_backup_correct.py || echo "Local execution also failed"
            }
          else
            echo "Railway CLI not available, trying local execution..."
            python railway_backup_correct.py || echo "Local execution failed"
          fi
          
          echo "Backup execution completed"
          
      - name: Wait and check for backup files
        run: |
          echo "Waiting for backup completion..."
          sleep 20
          
          echo "Checking for backup files..."
          echo "Current directory: $(pwd)"
          echo "All files in current directory:"
          ls -la
          
          echo ""
          echo "Looking for ZIP files:"
          ls -la *.zip 2>/dev/null || echo "No ZIP files found"
          
          echo ""
          echo "Looking for any backup files:"
          find . -name "*backup*" -type f 2>/dev/null || echo "No backup files found"
          
          echo ""
          echo "Looking for any ZIP files in subdirectories:"
          find . -name "*.zip" -type f 2>/dev/null || echo "No ZIP files found in subdirectories"
          
      - name: Create backup summary
        run: |
          echo "Creating backup summary..."
          
          # Check if any backup files were created
          if find . -name "*.zip" -type f 2>/dev/null | grep -q .; then
            echo "✅ Backup files found:"
            find . -name "*.zip" -type f -exec ls -la {} \;
            echo "BACKUP_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "❌ No backup files found"
            echo "BACKUP_SUCCESS=false" >> $GITHUB_ENV
          fi
          
      - name: Create GitHub Release
        if: env.BACKUP_SUCCESS == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.zip
            *backup*.zip
          tag_name: backup-${{ github.run_number }}
          name: Railway Backup ${{ github.run_number }}
          body: |
            ## Railway数据备份
            
            **备份时间**: ${{ github.event.head_commit.timestamp }}
            **触发方式**: ${{ github.event_name }}
            **工作流运行**: #${{ github.run_number }}
            
            ### 备份内容
            - 用户自定义币种
            - 数据库文件
            - 缓存目录
            - 日志文件
            
            ### 使用方法
            1. 下载ZIP文件
            2. 解压到本地目录
            3. 使用恢复脚本恢复数据
            
            **注意**: 此备份包含敏感数据，请妥善保管
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload backup as artifact
        uses: actions/upload-artifact@v4
        with:
          name: railway-backup-${{ github.run_number }}
          path: |
            *.zip
            *backup*.zip
          retention-days: 30
          if-no-files-found: warn
          
      - name: Create backup report
        if: always()
        run: |
          echo "## Backup Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Run**: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ env.BACKUP_SUCCESS }}" = "true" ]; then
            echo "✅ **Backup Status**: Success" >> $GITHUB_STEP_SUMMARY
            echo "**Files Created**: " >> $GITHUB_STEP_SUMMARY
            find . -name "*.zip" -type f -exec echo "- \`{}\`" \; >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Backup Status**: Failed" >> $GITHUB_STEP_SUMMARY
            echo "**Reason**: No backup files were generated" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps**: " >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.BACKUP_SUCCESS }}" = "true" ]; then
            echo "1. Download backup files from GitHub Releases or Artifacts" >> $GITHUB_STEP_SUMMARY
            echo "2. Extract and verify backup contents" >> $GITHUB_STEP_SUMMARY
          else
            echo "1. Check Railway authentication and project access" >> $GITHUB_STEP_SUMMARY
            echo "2. Verify backup script execution" >> $GITHUB_STEP_SUMMARY
            echo "3. Review logs for error details" >> $GITHUB_STEP_SUMMARY
          fi
